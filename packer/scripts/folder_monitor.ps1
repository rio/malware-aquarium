Write-Output "Monitoring of execution folder started "
# Start Execution powershell
Set-Content -Path "C:\Program Files (x86)\Common Files\monitor.ps1" -Value "
$currentUser = [System.Environment]::UserName
### SET FOLDER TO WATCH + FILES TO WATCH + SUBFOLDERS YES/NO
    $filewatcher = New-Object System.IO.FileSystemWatcher
    #Mention the folder to monitor
    $filewatcher.Path = 'C:\Users\{0}\Downloads\Recent' -f $currentUser
    $filewatcher.Filter = '*.*'
    #include subdirectories $true/$false
    $filewatcher.IncludeSubdirectories = $true
    $filewatcher.EnableRaisingEvents = $true  
### DEFINE ACTIONS AFTER AN EVENT IS DETECTED
    $writeaction = { $path = $Event.SourceEventArgs.FullPath
                $changeType = $Event.SourceEventArgs.ChangeType
                $logline = '$(Get-Date), $changeType, $path'
                Add-content 'C:\Users\{0}\Documents\filewatcher.txt' -value $logline -f $currentUser
              }    
    $writeaction2 = { $path = $Event.SourceEventArgs.FullPath
                $changeType = $Event.SourceEventArgs.ChangeType
                $get_file_name = $path.Split('\')[-1]
                $file = $get_file_name
                if($file.Split('.')[-1] -eq 'exe')
                {
                    Start-Process -FilePath $path
                }
                if($file.Split('.')[-1] -eq 'dll')
                {
                    regsvr32.exe /i /s $path
                }
                if($file.Split('.')[-1] -eq 'zip')
                {
                    Expand-7Zip $path -TargetPath 'C:\Users\{0}\Downloads\Recent' -f $currentUser -Password 'infected'
                    
                }
                $logline = '$(Get-Date), $changeType, $path, $file'
                Add-content 'C:\Users\{0}\Documents\filewatcher.txt' -value $logline -f $currentUser
                
              }   
### DECIDE WHICH EVENTS SHOULD BE WATCHED 
# The Register-ObjectEvent cmdlet subscribes to events that are generated by .NET objects on the local computer or on a remote computer.
# When the subscribed event is raised, it is added to the event queue in your session. To get events in the event queue, use the Get-Event cmdlet.
    # Register-ObjectEvent $filewatcher 'Created' -Action $writeaction
    Register-ObjectEvent $filewatcher 'Created' -Action $writeaction2
    #Register-ObjectEvent $filewatcher 'Changed' -Action $writeaction
    Register-ObjectEvent $filewatcher 'Deleted' -Action $writeaction
    #Register-ObjectEvent $filewatcher 'Renamed' -Action $writeaction
    while ($true) {}"

    
New-Service check_exec -BinaryPathName '"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" "C:\Program Files (x86)\Common Files\monitor.ps1"' -StartupType Automatic
# Start-Job -ScriptBlock {}